@page "/"


<PageTitle>File Explorer</PageTitle>

<RadzenSplitter Orientation="Orientation.Vertical" style="height: 400px; border: 1px solid rgba(0,0,0,.08);">
    <RadzenSplitterPane Size="100px">
    <RadzenSplitter>
        <RadzenSplitterPane Size="50%" Min="20%" Max="70%">
            <FileSystemPreview OnSelectValueChanged=@ContentHandler/>
        </RadzenSplitterPane>
        <RadzenSplitterPane>
       
                    @switch (extensionType)
                    {
                    case ExtensionTypeEnums.Image:
                            <ImagePreview content="@content"/>
                            break;
                    case ExtensionTypeEnums.Text:
                        <TextPreview content="@content" />
                            break;
                    case ExtensionTypeEnums.Default:
                        <BlankPreview content="@content" />
                            break;

                    }
            
             
        </RadzenSplitterPane>
    </RadzenSplitter>
</RadzenSplitterPane>
</RadzenSplitter>


<Controls directoryPath="@directoryPath" isDisabledCreateButton="@isDisabledCreateButton" isDisabledDeleteButton="@isDisabledDeleteButton" />
<EventConsole @ref=@console/>

@code {


    EventConsole console;

    ExtensionTypeEnums extensionType;
    string content;
    string directoryPath;
    bool isDisabledCreateButton;
    bool isDisabledDeleteButton;

    protected override async Task OnInitializedAsync()
    {
        isDisabledCreateButton = true;
        isDisabledDeleteButton = true;
        extensionType = ExtensionTypeEnums.Default;
        content = string.Empty;
        directoryPath = string.Empty;
    }
    async Task ContentHandler(EventCallbackArgs args)
    {
        console.Log($"Selected: {args.Path}");
        extensionType = args.ExtensionType;
        directoryPath = args.IsDirectory ? args.Path : Path.GetDirectoryName(args.Path);
        isDisabledCreateButton = string.IsNullOrEmpty(args.Path);
        isDisabledDeleteButton = (string.IsNullOrEmpty(args.Path) || !(args.IsDirectory && !args.Attributes.HasFlag(FileAttributes.System)));

        switch (extensionType)
        {
            case ExtensionTypeEnums.Image:
                content = "data:image/png;base64, " + args.Content;
                return;
            case ExtensionTypeEnums.Text:
                content = args.Content;
                return;
            case ExtensionTypeEnums.Default:
                content = args.Content;
                return;
        }
    }


}

